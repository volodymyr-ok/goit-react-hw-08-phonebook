{"version":3,"file":"static/js/693.c8064f1a.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","utils/contactsChecking.js","components/Form/Form.styled.js","components/Form/Form.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLI = styled.li`\n  display: flex;\n  flex-direction: column;\n  margin: 10px auto;\n  min-width: 250px;\n\n  p {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    .name {\n      color: #b6baff;\n    }\n  }\n\n  button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    border: 0 solid #b6baff;\n    /* padding: 5px 10px; */\n    padding: 0;\n    background-color: #cc4343;\n    margin-top: 5px;\n    margin-left: auto;\n\n    color: #222327;\n    font-weight: 700;\n    font-family: inherit;\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      background-color: transparent;\n      color: #9b6e14;\n      outline: 1px solid #9b6e14;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLI } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsOperations';\nimport { TiDeleteOutline } from 'react-icons/ti';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <StyledLI>\n      <p>\n        <span className=\"name\">{name}:</span>\n        <span className=\"number\">{number}</span>\n      </p>\n\n      <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        <TiDeleteOutline size={22} />\n      </button>\n    </StyledLI>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledUL = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  .empty-list {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    max-height: 100vh;\n    height: auto;\n    width: 100%;\n    gap: 5px;\n    padding: 15px 0;\n    color: #b6baff;\n    text-align: center;\n    text-transform: uppercase;\n  }\n`;\n","import { ContactItem } from '../ContactItem/ContactItem';\nimport { StyledUL } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactsOperations';\nimport { TbMoodEmpty } from 'react-icons/tb';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filterValue = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = () => {\n    if (contacts?.length) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterValue)\n      );\n    }\n  };\n\n  return (\n    <>\n      <StyledUL>\n        {filteredContacts() ? (\n          filteredContacts()?.map(({ id, name, number }) => {\n            return <ContactItem key={id} id={id} name={name} number={number} />;\n          })\n        ) : (\n          <div className=\"empty-list\">\n            <h3>There is no one here</h3>\n            <TbMoodEmpty size={100} />\n          </div>\n        )}\n        {/* {filteredContacts()?.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })} */}\n      </StyledUL>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { colors } from 'utils/theme';\n\nexport const FiltersForm = styled.form`\n  width: 250px;\n\n  margin: 0 auto;\n  margin-bottom: 15px;\n\n  display: flex;\n  flex-direction: column;\n\n  font-size: 18px;\n\n  label {\n    display: block;\n    text-align: start;\n    margin-bottom: 5px;\n  }\n\n  input {\n    margin: 0 auto;\n\n    border-radius: 5px;\n    border: 1px solid ${colors.mainBorder};\n    height: 35px;\n    background-color: ${colors.darkTransparent};\n    color: #7f86ff;\n    text-align: center;\n    font-family: inherit;\n    font-size: 20px;\n    padding: 5px 10px;\n\n    :focus,\n    :hover {\n      outline: none;\n    }\n\n    :placeholder-shown {\n      color: ${colors.mainBlue};\n      text-align: center;\n      font-size: 20px;\n    }\n  }\n`;\n\nexport const StyledLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  font-size: 18px;\n\n  input {\n    margin-top: 3px;\n\n    border-radius: 5px;\n    border: 1px solid ${colors.mainBorder};\n    width: 250px;\n    height: 35px;\n    background-color: ${colors.darkTransparent};\n    color: #7f86ff;\n    text-align: center;\n    font-family: inherit;\n    font-size: 20px;\n    padding: 5px 10px;\n\n    :focus,\n    :hover {\n      outline: none;\n    }\n\n    :placeholder-shown {\n      color: ${colors.mainBlue};\n      text-align: start;\n      font-size: 20px;\n    }\n  }\n`;\n","import { FiltersForm } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux'; // useDispatch,\nimport { getFilter } from 'redux/selectors';\nimport { changeFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dipatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChanger = e => {\n    dipatch(changeFilter(e.target.value.toLowerCase()));\n  };\n\n  return (\n    <FiltersForm>\n      <label htmlFor=\"filter\">Find contacts by name</label>\n      <input\n        type=\"text\"\n        onChange={e => handleChanger(e)}\n        value={filter}\n        id=\"filter\"\n        // placeholder=\"Find...\"\n      />\n    </FiltersForm>\n  );\n};\n","const contactsCheking = (contact, data) => {\n  if (contact.name === data.name) {\n    alert(`${data.name} is already in contacts.`);\n    return contact;\n  } else if (contact.number === data.number) {\n    alert(\n      `This number (${data.number}) is already in ${contact.name} contact.`\n    );\n    return contact;\n  }\n};\n\nexport default contactsCheking;\n","import styled from 'styled-components';\nimport { colors } from 'utils/theme';\n\nexport const StyledWrapper = styled.div`\n  margin: 0 auto;\n  width: auto;\n  max-width: 320px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-bottom: 15px;\n\n  &.opend .creator-btn {\n    /* background-color: ${colors.darkTransparent};\n    color: ${colors.mainBlue}; */\n    background-color: ${colors.darkTransparent};\n    /* color: ${colors.mainBlue}; */\n    border: 1px solid ${colors.darkTransparent};\n  }\n\n  .creator-btn {\n    /* margin-left: auto; */\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 5px;\n\n    /* height: 35px; */\n    width: 250px;\n    padding: 5px 10px;\n    outline: none;\n    border-radius: 5px;\n\n    /* border: 1px solid ${colors.mainBlue};\n    background-color: ${colors.mainBlue}; */\n    border: 1px solid ${colors.mainBorder};\n    background-color: ${colors.darkTransparent};\n    color: white;\n\n    font-size: 20px;\n    font-weight: 500;\n    font-family: inherit;\n  }\n\n  .creator-wrap {\n    max-height: 0;\n    overflow: hidden;\n\n    transition: max-height 0.25s ease-in-out;\n    transition-timing-function: ease-in-out;\n\n    &.opend {\n      max-height: 308px;\n    }\n  }\n\n  #creator {\n    transform: translateY(-110%);\n    transition-property: transform, margin;\n    transition-duration: 250ms;\n    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n\n    &.opend {\n      margin-top: 15px;\n      transform: translateY(0%);\n    }\n  }\n\n  .submit-btn {\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    gap: 5px;\n\n    font-size: 18px;\n    font-weight: 500;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport contactsCheking from 'utils/contactsChecking';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contactsOperations';\nimport { StyledForm } from 'utils/commonStyles';\nimport { StyledWrapper } from './Form.styled';\nimport { FiUserPlus } from 'react-icons/fi';\nimport { VscAdd, VscChromeMinimize } from 'react-icons/vsc';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [isCreatorOpened, setIsCreatorOpened] = useState(false);\n\n  useEffect(() => {\n    document.querySelector('#ctreator-form').classList.toggle('opend');\n  }, [isCreatorOpened]);\n\n  const toggleCreator = () => {\n    setIsCreatorOpened(!isCreatorOpened);\n\n    document.querySelector('#creator').classList.toggle('opend');\n    document.querySelector('.creator-wrap').classList.toggle('opend');\n  };\n\n  const handleChange = event => {\n    switch (event.currentTarget.name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const inContactList = contacts.filter(contact =>\n      contactsCheking(contact, { name, number })\n    ).length;\n\n    if (!inContactList) {\n      toggleCreator();\n      dispatch(addContact({ name, number }));\n    }\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <StyledWrapper id=\"ctreator-form\">\n      <button className=\"creator-btn\" type=\"button\" onClick={toggleCreator}>\n        {isCreatorOpened ? (\n          <>\n            <span>Hide creator</span>\n            <VscChromeMinimize />\n          </>\n        ) : (\n          <>\n            <span>Create contact</span>\n            <VscAdd />\n          </>\n        )}\n      </button>\n      <div className=\"creator-wrap\">\n        <StyledForm onSubmit={handleSubmit} id=\"creator\">\n          <label>\n            Name\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={handleChange}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              onChange={handleChange}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </label>\n\n          <button type=\"submit\" className=\"submit-btn\">\n            Add contact\n            <FiUserPlus />\n          </button>\n        </StyledForm>\n      </div>\n    </StyledWrapper>\n  );\n};\n","// import { FaRegAddressBook } from 'react-icons/fa';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport { HoveredWord, StyledH2 } from 'utils/commonStyles';\n\nconst Contacts = () => {\n  return (\n    <>\n      <StyledH2>\n        <HoveredWord>\n          <span>P</span>\n          <span>h</span>\n          <span>o</span>\n          <span>n</span>\n          <span>e</span>\n          <span>b</span>\n          <span>o</span>\n          <span>o</span>\n          <span>k</span>\n        </HoveredWord>\n      </StyledH2>\n      <Form />\n      <StyledH2>\n        <HoveredWord>\n          <span>C</span>\n          <span>o</span>\n          <span>n</span>\n          <span>t</span>\n          <span>a</span>\n          <span>c</span>\n          <span>t</span>\n          <span>s</span>\n        </HoveredWord>\n      </StyledH2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledLI","styled","ContactItem","id","name","number","dispatch","useDispatch","className","type","onClick","deleteContact","size","StyledUL","ContactList","contacts","useSelector","getContacts","filterValue","getFilter","useEffect","fetchContacts","filteredContacts","length","filter","contact","toLowerCase","includes","map","FiltersForm","colors","Filter","dipatch","htmlFor","onChange","e","changeFilter","target","value","handleChanger","data","alert","StyledWrapper","Form","useState","setName","setNumber","isCreatorOpened","setIsCreatorOpened","document","querySelector","classList","toggle","toggleCreator","handleChange","event","currentTarget","reset","onSubmit","preventDefault","contactsCheking","addContact","pattern","title","required"],"sourceRoot":""}