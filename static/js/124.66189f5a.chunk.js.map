{"version":3,"file":"static/js/124.66189f5a.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","utils/contactsChecking.js","components/Form/Form.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledLI = styled.li`\n  display: flex;\n  flex-direction: column;\n  margin: 10px auto;\n  min-width: 250px;\n\n  p {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    .name {\n      color: #b6baff;\n    }\n  }\n\n  button {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 50%;\n    border: 0 solid #b6baff;\n    /* padding: 5px 10px; */\n    padding: 0;\n    background-color: #cc4343;\n    margin-top: 5px;\n    margin-left: auto;\n\n    color: #222327;\n    font-weight: 700;\n    font-family: inherit;\n    cursor: pointer;\n\n    &:hover,\n    &:focus {\n      background-color: transparent;\n      color: #9b6e14;\n      outline: 1px solid #9b6e14;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { StyledLI } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsOperations';\nimport { TiDeleteOutline } from 'react-icons/ti';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <StyledLI>\n      <p>\n        <span className=\"name\">{name}:</span>\n        <span className=\"number\">{number}</span>\n      </p>\n\n      <button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n        <TiDeleteOutline size={22} />\n      </button>\n    </StyledLI>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const StyledUL = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n","import { ContactItem } from '../ContactItem/ContactItem';\nimport { StyledUL } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contactsOperations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filterValue = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = () => {\n    if (contacts?.length) {\n      return contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filterValue)\n      );\n    }\n  };\n\n  return (\n    <>\n      <StyledUL>\n        {filteredContacts()?.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })}\n      </StyledUL>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const StyledLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  font-size: 18px;\n\n  input {\n    margin-top: 3px;\n    border-radius: 5px;\n    border: 1px solid #d3d5ff40;\n    min-width: 250px;\n    height: 35px;\n    background-color: #b6baff14;\n    color: #7f86ff;\n    text-align: center;\n    font-family: inherit;\n    font-size: 20px;\n    padding: 5px 10px;\n\n    &:focus {\n      background-color: #d3d5ff40;\n      outline: none;\n    }\n  }\n`;\n","import { StyledLabel } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux'; // useDispatch,\nimport { getFilter } from 'redux/selectors';\nimport { changeFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dipatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChanger = e => {\n    dipatch(changeFilter(e.target.value.toLowerCase()));\n  };\n\n  return (\n    <StyledLabel>\n      Find contacts by name\n      <input type=\"text\" onChange={e => handleChanger(e)} value={filter} />\n    </StyledLabel>\n  );\n};\n","const contactsCheking = (contact, data) => {\n  if (contact.name === data.name) {\n    alert(`${data.name} is already in contacts.`);\n    return contact;\n  } else if (contact.number === data.number) {\n    alert(\n      `This number (${data.number}) is already in ${contact.name} contact.`\n    );\n    return contact;\n  }\n};\n\nexport default contactsCheking;\n","import { useState } from 'react';\nimport { StyledForm } from 'utils/theme';\nimport contactsCheking from 'utils/contactsChecking';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/selectors';\nimport { addContact } from 'redux/contactsOperations';\n\nexport const Form = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    switch (event.currentTarget.name) {\n      case 'name':\n        setName(event.currentTarget.value);\n        break;\n      case 'number':\n        setNumber(event.currentTarget.value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const inContactList = contacts.filter(contact =>\n      contactsCheking(contact, { name, number })\n    ).length;\n\n    if (!inContactList) {\n      dispatch(addContact({ name, number }));\n    }\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n\n      <button type=\"submit\">Add contact</button>\n    </StyledForm>\n  );\n};\n","// import { FaRegAddressBook } from 'react-icons/fa';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Form } from 'components/Form/Form';\nimport { StyledH2 } from 'utils/theme';\n\nconst Contacts = () => {\n  return (\n    <>\n      <StyledH2>Phonebook</StyledH2>\n      <Form />\n      <StyledH2>Contacts</StyledH2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledLI","styled","ContactItem","id","name","number","dispatch","useDispatch","className","type","onClick","deleteContact","size","StyledUL","ContactList","contacts","useSelector","getContacts","filterValue","getFilter","useEffect","fetchContacts","length","filter","contact","toLowerCase","includes","filteredContacts","map","StyledLabel","Filter","dipatch","onChange","e","changeFilter","target","value","handleChanger","data","alert","Form","useState","setName","setNumber","handleChange","event","currentTarget","reset","onSubmit","preventDefault","contactsCheking","addContact","pattern","title","required"],"sourceRoot":""}